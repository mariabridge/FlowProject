import React from "react";
import PropTypes from "prop-types";

import { connect } from "react-redux";
import { initGraph } from "./flow.js";
import { summarize } from "./summarize";
import FlowClass from "./flowClass";

let convert = require("xml-js");

import FlowSummaries from "./FlowSummaries";

import { updateFlows } from "../../actions/flowHowActions";

require("../styles/Flow4.scss");

@connect()

export default class FlowHow4 extends React.Component {

	componentDidMount() {
		// initGraph(this.refs.graphContainer, 
		// 		  this.refs.sidebarContainer, 
		// 		  this.refs.toolbarContainer, 
		// 		  this.refs.sidebarLeft, 
		// 		  this.onUpdate.bind(this),
		// 		  this.onCreateFlow.bind(this),
		// 		  this.refreshFlows.bind(this),
		// );
		// this.refreshFlows();


		let flowClass = new FlowClass(this.refs.graphContainer);
		flowClass.setupConfig("../../assets/xml/keyhandler-commons.xml");
		
		flowClass.setupUI(this.refs.sidebarContainer, this.refs.toolbarContainer);

		flowClass.onUpdateCall(this.onUpdate.bind(this));
		flowClass.onCreateFlowCall(this.onCreateFlow.bind(this));
		flowClass.onRefreshCall(this.refreshFlows.bind(this));

		flowClass.start();
	}
	
	onUpdate(xml) {
		this.refreshFlows();

		/**
		 * TODO: Fix "summarize()" and create flows dynamically from the data generated by the graph.
		 * Summarize.js does this but has not been fully tested and is not ready to be integrated
		 */
		 
		if(xml) {
			let xmlText = new XMLSerializer().serializeToString(xml);
			let xmlJSON = JSON.parse(convert.xml2json(xmlText, {compact: true, spaces: 2}));
			let json = summarize(xmlJSON);
			
			console.log(json);
		}
		
		
	}

	onCreateFlow() {
		console.log("CREATE LFOW");
		this.refreshFlows();
	}

	render() {
		return (
			<div>
				<div className="row">
					<div className="col-md-2" />
					<div className="col-md-8">
						<div className="row toolbarContainer" ref="toolbarContainer" />
					</div>
					<div className="col-md-2" />
				</div>
				<div className="row">
					<div className="col-md-3" ref="sidebarLeft">
						<FlowSummaries />
					</div>
					<div className="col-md-7">
						<div className="row graphContainer" ref="graphContainer" id="graph_Container"/>
						<div className="swimlane-container">
							<div id="swimlanes">
								<div className="swimlane" id="swimlane-1">
									<span>Target Apps</span>
								</div>
								<div id="microflows-row">
									<div className="swimlane" id="swimlane-2">
										<div className="background" />
										<span>Experience</span>
									</div>
									<div className="swimlane" id="swimlane-3">
										<div className="background" />
										<span>Process</span>
									</div>
									<div className="swimlane" id="swimlane-4">
										<div className="background" />
										<span>Information</span>
									</div>
								</div>
								<div id="flow-row">
									<div className="swimlane" id="swimlane-5">
										<span>Information Objects</span>
									</div>
								</div>
								<div className="swimlane" id="swimlane-6">
									<span>Source Apps</span>
								</div>
							</div>
						</div>
					</div>
					<div className="col-md-2" ref="sidebarContainer" />
        		</div>
			</div>
    	);
	}
	refreshFlows() {
		if(window.localStorage.flows) {
			let flows = JSON.parse(window.localStorage.flows);	
			this.props.dispatch(updateFlows(flows));
		}
	}
}

FlowHow4.propTypes = {
	dispatch: PropTypes.func,
};
